
####################################################

operation = new Operation(
	new Request('findOneAndUpdate', collection, filter, update, options), // request for the main transaction
	new Request('findOneAndUpdate', collection, filter, update, options) // request for the rollback transaction
)

transaction = new Transaction(
	new TransactionEnvironment(
		transactionCollection,
		transactionId, rollbackTransactionId
	),
	new TransactionOperations(...operations),
	new TransactionCallbacks(
		new OnCommit((results) => {
			// on commit executes if 
			// transaction is applied successfully 
		}),
		new OnRollback((error, results) => {
			// on rollback executes if
			// something bad happend in the main transaction (consistency of the database is broken)
			// if error is null then rollback transaction is applied successfully
			// if error is not null then something bad happend in the rollback transaction and only recovering process can help in 
			// that case 
		}),
		new OnFail((error, transactionId) => {
			// on fail executes if something bad happend in the main transction but consistency of the database is not broken, 
			// in that case rollback transaction is not being created and
			// it's better just to figure out what is problem by transactionId and error and start new transaction
			// obviously onFail does not execute on the rollback transaction, because rollback trancation cannot be called if 
			// consistency of the database is not broken. 
		}) 
	)
);
transaction.invoke();

####################################################

recoveringProcess = RecoveringProcess(db, options); // recovery
recoveringProcess.start(onTransactionRecoveredCallback() {});


####################################################

Requests: 
	aggregate(collection, pipeline, options)
	bulkWrite(collection, operations, options)
	deleteMany(collection, filter, options)
	deleteOne(collection, filter, options)
	findOneAndDelete(collection, filter, options)
	findOneAndReplace(collection, filter, replacement, options)
	findOneAndUpdate(collection, filter, update, options)
	initializeOrderedBulkOp(collection, options)
	initializeUnorderedBulkOp(collection, options)
	insertMany(collection, docs, options)
	insertOne(collection, doc, options)
	replaceOne(collection, filter, doc, options)
	updateMany(collection, filter, update, options)
	updateOne(collection, filter, update, options)

If rollback transaction fails then only recovery process can fix the problem, you can use error object for exploring what is wrong with operations in the transaction.
