
####################################################

operation = new Operation(
  new Request('findOneAndUpdate', collection, filter, update, options), // request for the main transaction
  new Request('findOneAndUpdate', collection, filter, update, options) // request for the rollback transaction
)

transaction = new Transaction(
  id,
  rollbackId,
  new TransactionCollection(collection),
  new TransactionOperations(...operations),
  new TransactionCallbacks(
    new OnCommit((transactionId, results) => {

    }),
    new OnRollback((transactionId, results) => {

    }),
    new OnConsistentFail((error, transactionId) => {
 
    }),
    new OnNonConsistentFail((error, transactionId) => {

    })
  )
);
transaction.invoke();

####################################################

recoveringProcess = RecoveringProcess(db, options); // recovery
recoveringProcess.start(onTransactionRecoveredCallback() {});


####################################################

Requests: 
  aggregate(collection, pipeline, options)
  bulkWrite(collection, operations, options)
  deleteMany(collection, filter, options)
  deleteOne(collection, filter, options)
  findOneAndDelete(collection, filter, options)
  findOneAndReplace(collection, filter, replacement, options)
  findOneAndUpdate(collection, filter, update, options)
  initializeOrderedBulkOp(collection, options)
  initializeUnorderedBulkOp(collection, options)
  insertMany(collection, docs, options)
  insertOne(collection, doc, options)
  replaceOne(collection, filter, doc, options)
  updateMany(collection, filter, update, options)
  updateOne(collection, filter, update, options)

If rollback transaction fails then only recovery process can fix the problem, you can use error object for exploring what is wrong with operations in the transaction.
