
####################################################

operation = new Operation(
	new Request('findOneAndUpdate', collection, filter, update, options),
	new Request('findOneAndUpdate', collection, filter, update, options)
)

transaction = new Transaction(
	new TransactionEnvironment(
		transactionCollection,
		transactionId, rollbackTransactionId
	),
	new TransactionOperations(...operations),
	new TransactionCallbacks(
		new OnCommit((results) => {
			// on commit
		}),
		new OnRollback((error, results) => {
			// on rollback
		})
	)
);
transaction.invoke();

####################################################

recoveringProcess = RecoveringProcess(db, options); // recovery
recoveringProcess.start(onTransactionRecoveredCallback() {});


####################################################

Requests: 
	aggregate(collection, pipeline, options)
	bulkWrite(collection, operations, options)
	deleteMany(collection, filter, options)
	deleteOne(collection, filter, options)
	findOneAndDelete(collection, filter, options)
	findOneAndReplace(collection, filter, replacement, options)
	findOneAndUpdate(collection, filter, update, options)
	initializeOrderedBulkOp(collection, options)
	initializeUnorderedBulkOp(collection, options)
	insertMany(collection, docs, options)
	insertOne(collection, doc, options)
	replaceOne(collection, filter, doc, options)
	updateMany(collection, filter, update, options)
	updateOne(collection, filter, update, options)

If rollback transaction fails then only recovery process can fix the problem, you can use error object for exploring what is wrong with operations in the transaction.
